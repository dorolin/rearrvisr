% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/orderGenomeMap.R
\name{orderGenomeMap}
\alias{orderGenomeMap}
\title{Order genome map}
\usage{
orderGenomeMap(genomemap, ordnames, partial = 0, ordpfx = "",
  ordsfx = "", sortby = "size")
}
\arguments{
\item{genomemap}{Data frame representing the genome map to be ordered,
containing the mandatory columns \code{$marker}, \code{$scaff},
\code{$start}, \code{$end}, and \code{$strand}, and optional further
columns.}

\item{ordnames}{Character vector with the names of genome segments (i.e.,
chromosomes or scaffolds) to which the \code{genomemap} will be sorted. The
IDs in the column \code{$scaff} of \code{genomemap} will be matched to the
names in \code{ordnames}, and sorted according to their appearance in
\code{ordnames}.}

\item{partial}{Integer of value \code{0} or \code{1}. Indicates whether IDs
in the column \code{$scaff} of \code{genomemap} have to match exactly
(\code{partial = 0}) or partially (\code{partial = 1}) to the the names in
\code{ordnames}.}

\item{ordpfx}{String that is prefix to the names in \code{ordnames}, allowing
additional matches.}

\item{ordsfx}{String that is suffix to the names in \code{ordnames}, thereby
restricting matches. Only relevant when \code{partial = 1}.}

\item{sortby}{String indicating whether genome segments that do not have a
unique match to the names in \code{ordnames} will be sorted by their size
(\code{sortby = "size"}) or by their name (\code{sortby = "name"}).}
}
\value{
A data frame containing an ordered version of \code{genomemap}. The
  IDs in column \code{$scaff} in \code{genomemap} are sorted according to
  their appearance in \code{ordnames}. Markers within each genome segment are
  sorted by their map position (i.e., the midpoint between positions given by
  the columns \code{$start} and \code{$end} in \code{genomemap}).
}
\description{
Order a genome map by genome segments and by the position of markers within
genome segments
}
\details{
\code{genomemap} must contain the mandatory columns \code{$marker} (a
  character or integer vector that gives the IDs of markers), \code{$scaff}
  (a character vector that gives the ID of the genome segment of origin of
  each marker), \code{$start} and \code{$end} (numeric vectors that specify
  the location of each marker on its genome segment), and \code{$strand} (a
  vector of \code{"+"} and \code{"-"} characters that indicate the reading
  direction of each marker). Additional columns are ignored and may store
  custom information.

  If \code{partial = 0}, only IDs in the column \code{$scaff} of
  \code{genomemap} will be considered that either match exactly to the names
  in \code{ordnames}, or that match exactly to the combined string of
  \code{ordpfx} and \code{ordnames}. \code{ordsfx} is ignored.

  If \code{partial = 1}, all IDs in the column \code{$scaff} of
  \code{genomemap} will be considered that either start with the combined
  string of \code{ordnames} and \code{ordsfx}, or that start with the
  combined string of \code{ordpfx}, \code{ordnames}, and \code{ordsfx}.

  If more than one ID in the column \code{$scaff} of \code{genomemap} matches
  (partially) to a specified genome segment name, matching genome segments
  will be sorted by their size (if \code{sortby = "size"}) or by their name
  (if \code{sortby = "name"}). All genome segments without any match will
  similarly be sorted by their size or name (as specified by \code{sortby})
  and appended to the end of the ordered genome map.
}
\examples{
\dontrun{

## specify genome segment names that should appear at the top of
## the genome map, and sort remaining genome segments by their size:
SIM_ord1<-orderGenomeMap(SIM_markers, ordnames = c("2", "3", "X"),
                         ordpfx = "chr", partial = 1, sortby = "size")
head(unique(SIM_ord1$scaff), n = 20L)

## sort all genome segments by name:
SIM_ord2<-orderGenomeMap(SIM_markers, ordnames = "all", sortby = "name")
head(unique(SIM_ord2$scaff), n = 20L)
## ordnames = "all" is used as a non-matching dummy name

## only sort map positions, keeping original order of genome segments:
SIM_ord3<-orderGenomeMap(SIM_markers, ordnames = unique(SIM_markers$scaff))
head(unique(SIM_ord3$scaff), n = 20L)
}

}
