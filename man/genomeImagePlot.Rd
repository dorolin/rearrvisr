% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/genomeImagePlot.R
\name{genomeImagePlot}
\alias{genomeImagePlot}
\title{Genome Image Plot}
\usage{
genomeImagePlot(SYNT, focalgenome, ordfocal, remstr = "", main = "",
  remThld = 0.05, vspace = 0, hspace = 0.01, mar = NULL,
  xaxlab = NULL, xlab = "Position [Mb]", yaxlab = NULL, cex = 1,
  font.main = 3, makepdf = FALSE, newdev = TRUE,
  filename = "genome.pdf", colormodel = "srgb")
}
\arguments{
\item{SYNT}{A list of matrices that store data on different classes of
rearrangements and additional information. \code{SYNT} must have been
generated with the \code{\link{computeRearrs}} function.}

\item{focalgenome}{Data frame representing the focal genome, containing the
mandatory columns \code{$marker}, \code{$scaff}, \code{$start},
\code{$end}, and \code{$strand}, and optional further columns. Markers need
to be ordered by their map position.}

\item{ordfocal}{Character vector with the IDs of the focal genome segments
that will be plotted. Have to match (a subset of) IDs in
\code{focalgenome$scaff}.}

\item{remstr}{String that should be removed from the IDs in \code{ordfocal}
to simplify the y-axis labels. Only relevant when \code{yaxlab = NULL}.}

\item{main}{Title of the plot.}

\item{remThld}{A numeric value between \code{0} (inclusive) and \code{0.5}
(exclusive). Controls whether components of rearrangements that are less
parsimonious to have changed position relative to the alternative
components will be plotted. To plot all components, \code{remThld} needs to
be smaller than \code{remWgt} used in the \code{\link{computeRearrs}}
function.}

\item{vspace}{A numeric value between \code{0} and \code{5}. Controls the
amount of vertical space between focal genome segments.}

\item{hspace}{A numeric value between \code{0} and \code{1} that controls the
proportion of horizontal space that is added to the last marker of a focal
genome segment, calculated from the size of the largest focal genome
segment.}

\item{mar}{A numerical vector of the form \code{c(bottom, left, top, right)}
that specifies the margins on the four sides of the plot. The default
\code{mar = NULL} sets the margins automatically.}

\item{xaxlab}{Data frame with two columns that gives the annotations of the
x-axis. The column \code{$pos} specifies the position of tick-marks, and
the column \code{$lab} specifies the labels of tick-marks. The default
\code{xaxlab = NULL} makes annotations every 5 Mb.}

\item{xlab}{Title for the x-axis.}

\item{yaxlab}{Annotations of the y-axis. Must be the same length as
\code{ordfocal}. The default \code{yaxlab = NULL} uses as annotations the
names in \code{ordfocal}, simplified through removal of the string in
\code{remstr}.}

\item{cex}{Numerical value that specifies the amount of text magnification.}

\item{font.main}{Font for the title of the plot. \code{1} corresponds to
plain text, \code{2} to bold face, \code{3} to italic, and \code{4} to bold
italic.}

\item{makepdf}{Logical. Save plot as PDF. See \code{filename} and
\code{colormodel}.}

\item{newdev}{Logical. Opens a new default graphics device (but not
"RStudioGD") via \code{dev.new}. Only relevant when \code{makepdf = FALSE}.}

\item{filename}{Character string that gives the name of the PDF file when
\code{makepdf = TRUE}.}

\item{colormodel}{Character string that gives the color model for the PDF
when \code{makepdf = TRUE}. Allowed values are \code{"srgb"},
\code{"cmyk"}, \code{"gray"}, or \code{"grey"}.}
}
\value{
A plot to the default graphics device (but not "RStudioGD") or a PDF
  file.

  The plot visualizes the data contained in \code{SYNT} for each focal genome
  segment in \code{ordfocal}, arranged along the y-axis. The x-axis gives the
  map position of markers on their focal genome segment. Thin vertical lines
  (ticks) indicate the positions of markers, rearrangement breakpoints, and
  different classes of rearrangements within six rows per focal genome
  segment.

  Starting at the bottom, the first row gives the map positions of all
  markers in \code{focalgenome} and of the subset of markers present in
  \code{SYNT} by gray and black ticks, respectively. The second row gives the
  positions of rearrangement breakpoints by red ticks. Ticks are drawn at the
  midpoints between the positions of the two markers present in \code{SYNT}
  that are adjacent to the breakpoints. Only markers with black ticks can
  receive colored ticks in the following rows. Maroon indicates markers that
  are part of inversions within CARs within focal genome segments (IV);
  purple indicates markers that are part of translocations within CARs within
  focal genome segments (TLWC); blue indicates markers that are part of
  translocations between CARs within focal genome segments (TLWS); green
  indicates markers that are part of translocations between CARs between
  focal genome segments (TLBS).

  Unless the argument \code{remThld} is set to a value smaller than that of
  \code{remWgt} in the \code{\link{computeRearrs}} function, only markers
  that are more parsimonious to have changed position relative to alternative
  markers are highlighted. Lighter tints denote markers that are part of
  large rearrangements, while darker shades denote markers that are part of
  small rearrangements. To distinguish between individual large
  rearrangements versus multiple short adjacent rearrangements, it may be
  helpful to take the position of breakpoints into account.
}
\description{
Generate a plot that shows different classes of rearrangements along a given
set of focal genome segments
}
\details{
Parameters \code{SYNT}, \code{focalgenome}, and \code{ordfocal} need to be
  specified, all other parameters have default or automatic settings.

  \code{focalgenome} must contain the column \code{$marker}, a vector of
  either characters or integers with unique ortholog IDs that can be matched
  to the values in the rownames of \code{SYNT}. Values can be \code{NA} for
  markers that have no ortholog. \code{$scaff} must be a character vector
  giving the name of the focal genome segment (e.g., chromosome or scaffold)
  of origin of each marker. \code{$start} and \code{$end} must be numeric
  vectors giving the location of each marker on its focal genome segment.
  \code{$strand} must be a vector of \code{"+"} and \code{"-"} characters
  giving the reading direction of each marker. Additional columns are ignored
  and may store custom information, such as marker names. Markers need to be
  ordered by their map position within each focal genome segment, for example
  by running the \code{\link{orderGenomeMap}} function. \code{focalgenome}
  may contain additional rows that were absent when running the
  \code{\link{computeRearrs}} function. However, all markers present in
  \code{SYNT} need to be contained in \code{focalgenome}, with the subset of
  shared markers being in the same order. Having additional markers in
  \code{focalgenome} can be useful for example to include additional
  non-orthologous markers in the plot.

  When \code{makepdf = TRUE} or \code{newdev = TRUE}, the width and height of
  the graphic will be set automatically. The dimensions are determined in
  inches, thus \code{makepdf = FALSE} and \code{newdev = TRUE} will produce
  an error or not work correctly when the default units of the default
  graphics device are not inches (such as \code{\link[grDevices]{bmp}},
  \code{\link[grDevices]{jpeg}}, \code{\link[grDevices]{png}}, or
  \code{\link[grDevices]{tiff}}). This can be avoided by setting the default
  graphics device to one that has inches as default units. Setting both
  \code{makepdf = FALSE} and \code{newdev = FALSE} will allow to specify
  alternative, user-defined dimensions of the graphic. See examples below.
}
\examples{
SYNT<-computeRearrs(TOY24_focalgenome, TOY24_compgenome, doubled = TRUE)

genomeImagePlot(SYNT, TOY24_focalgenome, c("1", "2", "3"), main = "TOY24")

## change x-axis labels
op<-options(scipen=999)
myxaxlab<-data.frame(pos=seq(2*10^6,10^7,2*10^6),
                     lab=as.character(seq(2*10^3,10^4,2*10^3)))
options(op)
myxlab<-"Position [kb]"
genomeImagePlot(SYNT, TOY24_focalgenome, c("1", "2", "3"), main = "TOY24",
                xaxlab = myxaxlab, xlab = myxlab)

\dontrun{

## make PDF (automatically determine the width and height of the graphic)
genomeImagePlot(SYNT, TOY24_focalgenome, c("1", "2", "3"), main = "TOY24",
                makepdf = TRUE, newdev = FALSE, filename = "genome.pdf")

## make PDF (default dimensions, i.e., square format)
pdf(file = "genome.pdf")
genomeImagePlot(SYNT, TOY24_focalgenome, c("1", "2", "3"), main = "TOY24",
                makepdf = FALSE, newdev = FALSE)
dev.off()

## plot in R Studio window
op <- options(device = "RStudioGD")
genomeImagePlot(SYNT, TOY24_focalgenome, c("1", "2", "3"), main = "TOY24",
                newdev = FALSE)
options(op)

## make EPS, and set user-specified dimensions
setEPS()
postscript("genome.eps", width=4.5,height=3.42,pointsize=9)
genomeImagePlot(SYNT, TOY24_focalgenome, c("1", "2"), main = "TOY24",
                vspace = 1, makepdf = FALSE, newdev = FALSE)
dev.off()
}

}
\seealso{
\code{\link{computeRearrs}}, \code{\link{genomeRearrPlot}}. For more
  information about arguments that are passed to other functions, see
  \code{\link[grDevices]{dev.new}}, \code{\link[grDevices]{pdf}},
  \code{\link[graphics]{plot}}, \code{\link[graphics]{par}}.
}
